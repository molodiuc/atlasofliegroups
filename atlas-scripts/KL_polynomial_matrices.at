{ recover required length_diff function, now only remaining in old_kl.at }
set length (int i, vec stops) = int: { compute length=max{k:stops[k]<=i} }
( let a=0, b=#stops { use binary search; invariant: a <= length < b } in
  while a+1<b { when b=a+1, a is our max }
  do let avg=(a+b)\2 in if stops[avg]<=i then a:=avg else b:=avg fi od
; a
)
set length_diff (int i,int j,vec stops) = int: length(j,stops)-length(i,stops)

{
process output of KL_block or ext_KL_block to give ([Param],int,poly_mat,vec), 
the third entry is the matrix of polynomials
}

set cook_KL_block ([Param] B,int entry_elem
                  ,mat KL,[poly] polys,vec stops
                  ,vec surv, mat contrib) = ([Param],int,poly_mat,vec):
  let nB=#B, n_surv=#surv
  then raw_P_mat = poly_mat: { survivor columns extracted and transposed }
    for j in surv do let KL_j=KL[j] in
      for i:nB do
        let ind=KL_j[i] in if ind<0 then -polys[-ind] else polys[ind] fi
      od
    od
  then cooked_P_mat = poly_mat:
     for i:n_surv do for j:n_surv do
       let raw_col_j = raw_P_mat[j], sum=poly_0 in
       for k:nB do sum:=poly_plus(sum,contrib[i,k]*raw_col_j[k]) od; sum   {addition of polynomials}
     od od
  , get_index (int z) = int: { least |i| with |surv[i]>=z| }
    let min=0, max=n_surv in
    while min<max
    do let avg=(min+max)\2 in if surv[avg]>=z then max:=avg else min:=avg+1 fi
    od; min
  in ( for i in surv do B[i] od
     , get_index(entry_elem)
     , cooked_P_mat
     , for s in stops do get_index(s) od
     )

{ define the P,P_signed and Q polynomials
  P,P_signed,Q matrices of polynomials in q
  upper triangular if B is in standard (increasing) order
  P_signed: positive/negative integer coefficients
  P: non-negative integer coefficients
  Q: non-negative integer coefficients, inverse of P_signed
  P_signed(1) is the multiplicity of a standard module in an irreducible
    (character formula)
  Q(1) is the multiplicity of an irreducible module in a standard module
}

set permutation ([Param] B1, [Param] B2) =([int],bool):
let perm=for i:#B2 do find(B2,B1[i]) od in (perm,all(for i:#perm do i !=-1 od))

set KL_P_polynomials (Param p) = poly_mat:let (,,P,)=cook_KL_block(KL_block(p)) in P

set KL_P_signed_polynomials(Param p)=poly_mat:
let (pseudo_block,,,,,indices,)=KL_block(p) then 
 B=for i in indices do pseudo_block[i] od then
 rv=KL_P_polynomials(p) in
 for i:#indices do for j:#indices do
  rv:=update_matrix_entry(rv,i,j,(-1)^(length(B[i])-length(B[j]))*rv[i][j]) od od;rv

set KL_P_polynomials([Param] B)=poly_mat:
  let (pseudo_block,,,,,survivors,)=KL_block(B[0]) then 
  block=for i in survivors do pseudo_block[i] od then
  (perm,valid)=permutation(B,block) then
  P=assert(valid,"given [Param] B does not agree with block_of B[0]");KL_P_polynomials(B[0])  in
{  let ()=prints("permutation in KL_P_polynomials:", perm) in}
  poly_permute_basis(perm,P)

set KL_P_signed_polynomials([Param] B)=poly_mat:
  let (pseudo_block,,,,,survivors,)=KL_block(B[0]) then 
  block=for i in survivors do pseudo_block[i] od then
  (perm,valid)=permutation(B,block) then
  P=assert(valid,"given [Param] B does not agree with block_of B[0]");KL_P_signed_polynomials(B[0])  in
  poly_permute_basis(perm,P)

{*DEFINE* the Q-polynomials as inverse of the signed P-matrix}
{see dual.at for a different approach}

set KL_Q_polynomials (Param p)=poly_mat:upper_unitriangular_inverse (KL_P_signed_polynomials(p))
set KL_Q_polynomials ([Param] B)=poly_mat:upper_unitriangular_inverse (KL_P_signed_polynomials(B))

{                     twisted versions                                   }

set final_subset([Param] B)=[Param]: let rv=[] in for p in B do if is_final(p) then rv#:=p fi od;rv
{this is KL_block@(Param,mat), the twisted analogue of KL_block@Param
 Marc called this of ext_KL_block@(Param,mat); the ext is superflous and 
 in keeping with other conventions not used
}
set KL_block (Param p, mat delta) = { emulate built-in KL_block }
    ([Param],int,mat,[vec],vec,vec,mat):
  let (regular_extblock,,,) = extended_block(p,delta)
  , (KL_mat,polys,stops) = raw_ext_KL(p,delta)
  , survivors = vec: [] then
    final_subset=final_subset(regular_extblock) 
  then columns = [vec]:
    for q@j in regular_extblock
    do let Q = finalize_extended(q,delta) in
    if #Q=1 then let r=monomials(Q)[0]  in 
     if r.x=q.x and r.lambda=q.lambda and r.nu=q.nu then survivors  #:= j fi fi { gather those expanding to themselves }
    ; vec: for i in regular_extblock do 
       if find(final_subset,i)!=-1 then Q[i].s_to_minus_1 else 0 fi od
    od
  , reg_size = #regular_extblock
  in  
{  let ()=prints("survivors:", survivors, "  reg_size:", reg_size) in
  let ()=prints("columns:", #columns, " ", columns) in }
(regular_extblock, first(reg_size,(int i):regular_extblock[i]=p)
     ,KL_mat,polys,stops
     ,survivors
     ,matrix((#survivors,reg_size) { slice out the surviving rows: }
{            ,(int i,int j) int:prints("i,j:", i, ",", j); columns[j][survivors[i]]}
            ,(int i,int j) int: columns[survivors[i]][j]
            )
     )

set KL_P_polynomials (Param p,mat delta) = poly_mat:let (,,P,)=cook_KL_block(KL_block(p,delta)) in P
{set KL_P_polynomials ([Param] B,mat delta) = poly_mat:KL_P_polynomials(B[0],delta)}

set KL_P_polynomials([Param] B_fixed,mat delta)=poly_mat:
  if #B_fixed=0 then zero_poly_matrix(0) else
  let (pseudo_block,,,,,survivors,)=KL_block(B_fixed[0],delta) then 
  block=for i in survivors do pseudo_block[i] od then
  (perm,valid)=permutation(B_fixed,block) then
  P=assert(valid,"given [Param] B_fixed does not agree with block_of B_fixed[0]");KL_P_polynomials(B_fixed[0],delta)  in
{  let ()=prints("permutation in KL_P_polynomials(p,delta):", perm) in}
  poly_permute_basis(perm,P) fi

set KL_P_signed_polynomials(Param p, mat delta)=poly_mat:
let (B,,,)=cook_KL_block(KL_block(p,delta)) then
 rv=KL_P_polynomials(p,delta) in
 for i:#B do for j:#B do
  rv:=update_matrix_entry(rv,i,j,(-1)^(length(B[i])-length(B[j]))*rv[i][j]) od od;rv

{set KL_P_signed_polynomials(Param p,mat delta)=poly_mat:
let (pseudo_block,,,,,indices,)=KL_block(p,delta) then 
 B=for i in indices do pseudo_block[i] od then
 rv=KL_P_polynomials(p,delta) in
 for i:#indices do for j:#indices do
  rv:=update_matrix_entry(rv,i,j,(-1)^(length(B[i])-length(B[j]))*rv[i][j]) od od;rv
}
{basis: fixed parameters in B}

set KL_P_polynomials_alt([Param] B,mat delta)=poly_mat:
  let (pseudo_block,,,,,survivors,)=KL_block(B[0],delta) then 
  block=for i in survivors do pseudo_block[i] od then
  (perm,valid)=permutation(B,block) then
{  ()=prints("valid:", valid, "perm:", perm) then}
  P=assert(valid,"given [Param] B does not agree with block_of B[0]");KL_P_polynomials(B[0],delta)  in
  poly_permute_basis(perm,P)

set KL_P_signed_polynomials([Param] B,mat delta)=poly_mat:
  let (pseudo_block,,,,,survivors,)=KL_block(B[0]) then 
  block=for i in survivors do pseudo_block[i] od then
  (perm,valid)=permutation(B,block) then
  P=assert(valid,"given [Param] B does not agree with block_of B[0]");KL_P_signed_polynomials(B[0],delta)  in
  poly_permute_basis(perm,P)

{*DEFINE* the Q-polynomials as inverse of the signed P-matrix}
{see dual.at for a different approach}

set KL_Q_polynomials (Param p)=poly_mat:upper_unitriangular_inverse (KL_P_signed_polynomials(p))
set KL_Q_polynomials ([Param] B)=poly_mat:upper_unitriangular_inverse (KL_P_signed_polynomials(B))











{    some old versions, not used   }

set KL_P_polynomials_old (Param p)=poly_mat:
( let (pseudo_block,n,Pmatrix,polynomials,stops,survivors,cumulation_matrix)=KL_block(p) then
  block=for i in survivors do pseudo_block[i] od then
  m=#survivors then
  P=zero_poly_matrix(m) then
  ()=for i:m do 
     let I=survivors[i] in
       for j:m do 
        let J=survivors[j] in
        P:=update_matrix_entry(P,i,j,polynomials[Pmatrix[I,J]])
       od
     od in
   mat_as_poly_mat(cumulation_matrix)*P
)
set KL_P_polynomials_old ([Param] B_fixed,mat delta) = [[poly]]:
  assert( all(for p in B_fixed do is_fixed(delta,p) od)
  	, "Not every parameter is delta-fixed" );
  let (P,polys,)=raw_ext_KL(B_fixed[0],delta) in
  for row@i in ^P
  do
    for entry@j in row
    do {(-1)^length_diff(i,j,jumps)
     *} if >=entry then polys[entry] else -polys[-entry] fi
    od
  od

set KL_P_signed_polynomials_old ([Param] B_fixed,mat delta) = [[poly]]:
  assert( all(for p in B_fixed do is_fixed(delta,p) od)
	, "Not every parameter is delta-fixed" );
  let (P,polys,jumps)=raw_ext_KL(B_fixed[0],delta) in
  for row@i in ^P
  do
    for entry@j in row
    do (-1)^length_diff(i,j,jumps)
     * if >=entry then polys[entry] else -polys[-entry] fi
    od
  od



