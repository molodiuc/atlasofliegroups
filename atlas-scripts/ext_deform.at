<basic.at
<extended.at
<polynomial.at

set KL_block (Param p, mat delta) = { emulate built-in |KL_block| }
    ([Param],int,mat,[vec],vec,vec,mat):
  let (regular_extblock,,,) = extended_block(p,delta)
  , (KL_mat,polys,stops) = raw_ext_KL(p,delta)
  then survivors =
    ## for q@j in regular_extblock do if q.survives then [j] else [] fi od
  , length = from_stops(stops)
  in ( regular_extblock,  first(for q in regular_extblock do q=p od)
     , KL_mat, polys, stops
     , vec: survivors
     , for q@j in regular_extblock { run through columns }
       do let lq=length(j), Q = finalize_extended(q,delta) in
         for si in survivors
         do minus_1^(lq-length(si))*Q[regular_extblock[si]].s_to_minus_1
         od
       od
     )

{ use output of |KL_block| to prepare block, signed KL matrix, and stops }
set cook_KL_block ([Param] B,int entry_elem
                  ,mat KL,[poly] polys,vec stops
                  ,vec surv, mat contrib) =
  ([Param],int,poly_mat,vec): { singular block, z0, signed P matrix, lengths }
  let nB=#B, n_surv=#surv
  then inter_mat = poly_mat: { survivor columns extracted, and transposed }
    for j in surv do for ind in KL[j] do
      if ind<0 then -polys[-ind] else polys[ind] fi { entries are |poly| now }
    od od
  , len = from_stops(stops) { compute length from index into |B| }
  then cooked_P_mat = poly_mat:
     for si@i in surv do let lsi=len(si) in for sj@j in surv do
       let sum=poly_0 in
       for Pkj@k in inter_mat[j] do sum:=flex_add(sum,contrib[i,k]*Pkj) od
     ; sum * minus_1^(len(sj)-lsi)
     od od
  , get_index (int z) = int: binary_search_first((int i):surv[i]>=z,0,n_surv)
  in ( for i in surv do B[i] od { condensed block }
     , get_index(entry_elem) { convert index of seeding element }
     , cooked_P_mat
     , for s in stops do get_index(s) od { convert stops to condensed block }
     )

set ed_verbose=false

set deformation_terms (Param p, mat delta) = ParamPol:
  assert(twist(p,delta)=p,"parameter is not delta-fixed");
  let (B,P_mat,length) = extended_KL_block(p,delta) then nB=#B in
  if =nB or B~[0]!=p
  then null_module(p) { if |p| itself is not among survivors, return 0 }
  else { compute final column |acc| of |Q| matrix by solving linear system
         $P'*acc=e_p$ with $P'$ a matrix of Split, columns from |KL_sum_at_s| }
    let remainder = null(nB-1)#1 { start with standard basis vector for |p| }
    , solution=null(nB)
    , !opposite_parity=1-length~[0]%2 { opposite to that of |length(p)| }
    , !on_p = orientation_nr(p)
    in
    for q_ind : nB
    ~do let contrib=remainder[q_ind]*P_mat[q_ind] in
      if ed_verbose
      then prints("Contribution: ",remainder[q_ind],"*",P_mat[q_ind])
      fi;
      remainder -:= contrib
    ; if length[q_ind]%2=opposite_parity
      then solution +:= contrib
      ; if ed_verbose then prints("added, giving ",solution) fi
      fi
    od
  ; null_module(p)+
    for c@i in solution
    do { twist (1-s)*solution according to orientation numbers of its terms }
      let x=B[i] then (q,r)=(on_p-orientation_nr(x))\%2 in
      assert(=r,"odd orientation");
      (minus_1^q*c*one_minus_s,x) { we have |s^q*c*(1-s) = (-1)^q*c(1-s)| }
      { for the same reason we replaced |s| by |-1| in computations giving |c| }
    od
  fi

set recursive_deform (Param p, mat delta) = ParamPol:
  assert(not is_zero(p) and is_final(p) and is_fixed(delta,p)
	,"improper parameter");
  let G=p.real_form then !empty=G.null_module in
  if ed_verbose { choose verbose or non-verbose version of the function }
  then rec_fun full_def (Split sc,Param p) ParamPol:
       { |sc| will simply scale the resulting ParamPol, |delta| is implicit }
    begin
      prints("full_def with: sc=", sc, ", p=", p);
      assert(is_standard(p)
	    ,"non standard parameter encountered in deformation");
      let acc=empty, at_nu0 =
        let (p0,flipped) = scale_extended(p,delta,0)
        in if flipped then s*sc else sc fi * finalize_extended(p0,delta)
      in
      prints("deformation at nu=0 contributes ",at_nu0);
      for factor in reducibility_points(p)
      ~do
	let (pf,flipped)=scale_extended(p,delta,factor) { next deformation }
	then def= sum(G,
          for c@q in finalize_extended(pf,delta)
          do if flipped then s*c else c fi * deformation_terms(q,delta)
          od )
	in
        if flipped then def := s*def fi { flip signatures in this rare case }
      ; prints("adding deformation term for p=", pf, new_line,"adding:", def)
      ; acc+:=def
      od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do { apply |full_def| recursively to all those terms }
        at_nu0 +:= full_def(sc*k,q) { gather harvest from those deformations }
      od
    ; at_nu0
    end
  else rec_fun full_def (Split sc,Param p) ParamPol:
       { |sc| will simply scale the resulting ParamPol, |delta| is implicit }
    begin
      assert(is_standard(p),"non standard parameter in deformation");
      let acc=empty, at_nu0=
        let (p0,flipped) = scale_extended(p,delta,0)
        in if flipped then s*sc else sc fi * finalize_extended(p0,delta)
      in
      for factor in reducibility_points(p)
      ~ { direction of deformation is down, towards 0; this is not essential }
      do let (pf,flipped)=scale_extended(p,delta,factor) in
        acc+:= sum(G,
          for c@q in finalize_extended(pf,delta)
          do if flipped then s*c else c fi * deformation_terms(q,delta)
          od )
      od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do at_nu0 +:= full_def(sc*k,q) od
    ; at_nu0
    end
  fi { apply that recursive function to the initial argument: } (1,p)

set twisted_recursive_deform (Param p) = ParamPol:
  assert(not is_zero(p) and is_final(p) and twist(p)=p,"improper parameter");
  let G=p.real_form
  then !empty=G.null_module, !delta=G.distinguished_involution in
  if ed_verbose { choose verbose or non-verbose version of the function }
  then rec_fun full_def (Split sc,Param p) ParamPol:
       { |sc| will simply scale the resulting ParamPol, |delta| is implicit }
    begin
      prints("full_def with: sc=", sc, ", p=", p);
      assert(is_standard(p)
	    ,"non standard parameter encountered in deformation");
      let acc=empty, at_nu0 =
        let (p0,flipped) = scale_extended(p,delta,0)
        in if flipped then s*sc else sc fi * finalize_extended(p0,delta)
      in
      prints("deformation at nu=0 contributes ",at_nu0);
      for factor in reducibility_points(p)
      ~do
	let (pf,flipped)=scale_extended(p,delta,factor) { next deformation }
	then def= sum(G,
          for c@q in finalize_extended(pf,delta)
          do if flipped then s*c else c fi * twisted_deform(q)
          od )
	in
        if flipped then def := s*def fi { flip signatures in this rare case }
      ; prints("adding deformation term for p=", pf, new_line,"adding:", def)
      ; acc+:=def
      od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do { apply |full_def| recursively to all those terms }
        at_nu0 +:= full_def(sc*k,q) { gather harvest from those deformations }
      od
    ; at_nu0
    end
  else rec_fun full_def (Split sc,Param p) ParamPol:
       { |sc| will simply scale the resulting ParamPol, |delta| is implicit }
    begin
      assert(is_standard(p),"non standard parameter in deformation");
      let acc=empty, at_nu0=
        let (p0,flipped) = scale_extended(p,delta,0)
        in if flipped then s*sc else sc fi * finalize_extended(p0,delta)
      in
      for factor in reducibility_points(p)
      ~ { direction of deformation is down, towards 0; this is not essential }
      do let (pf,flipped)=scale_extended(p,delta,factor) in
        acc+:= sum(G,
          for c@q in finalize_extended(pf,delta)
          do if flipped then s*c else c fi * twisted_deform(q)
          od )
      od
    ; for k@q in acc { traverse the sum of the deformation terms spun off }
      do at_nu0 +:= full_def(sc*k,q) od
    ; at_nu0
    end
  fi { apply that recursive function to the initial argument: } (1,p)

set full_deform = recursive_deform@(Param,mat)
