{signs for extended parameters in special cases, used primarily in hecke.at}

<extended_misc.at { type ExtParam }
<extended_cross.at { ext_cross@(int,ExtParam) }
<extended_cayley.at { ext_Cayley@(int,ExtParam) }
<hecke.at { for y_gen }

{ given E and F, where F occurs in 2i12-Cayley(E)
  compute the sign: coefficient of p(F) in  T_kappa(p(E))
  using the new *conjectural* formula, for the old one see 2ign_2i12_old
  the conjecture is the following
  set s=sign(ext_Cayley(k,E)[0 or 1],F)
  set t=sign(ext_Cayley(k,F)[0 or 1],E)
  in each case the Cayleys of type 2i12/2r21 by root k are double valued,
    and one of them gives \pm the other argument
  then define
    sign_2i12(k,E,F)=1 if s=t=1 and -1 otherwise
  the idea is:
  there are 4 representations E_1,E_2 (more compact Cartan)
    and F_1,F_2 (more split)
  take these to be the default extended parameters
  for each pair (i,j) (i,j=1,2) there is a sign E_i --> F_j:
    whether \pm F_j occurs in the Cayley of E_i by root k (of type 2i12)
  and another sign F_i --> E_j:
    whether \pm E_j occurs in the Cayley of F_i by root k (of type 2r21)

  typically 7 of these are +, and 1 is minus

  then sign_2i12(k,E_i,F_j)=-1 if *either arrow gets a minus*, and 1 otherwise

  in SL(8,R) with p=spherical_principal_series(G,rho(G)/4)
  you get 6 pluses and 2 minuses
}

set sign_2i12 (int j, ExtParam E, ExtParam F) = int:
  let f (int j, ExtParam E, ExtParam F) = int:
    let c=ext_Cayley(j,E) in sign(c[0],F)+sign(c[1],F)
  in if f(j,E,F)=1 and f(j,F,E)=1 then 1 else -1 fi

{ given E=E(x,y,lambda_rho,l,tau,t) and F=(x',y',lambda_rho',tau',l't') related
  by 2i12, compute the sign: coefficient of pi(F) in  T_kappa(\pi(E))
  see "More on the 2i12, 2Ci and 1i cases" Proposition 1.13
}
set sign_2i12_old (int j,ExtParam E,ExtParam F) = int:
{ (ic_E,delta_E,gamma_E,lambda_E,theta_E,g_E,l_E,omega_E,tau_E,t_E):E,
  (ic_F,delta_F,gamma_F,lambda_F,theta_F,g_F,l_F,omega_F,tau_F,t_F):F))=int:
}
begin
  let id=integrality_datum(E) in
  let alpha=root(id,j) in
  let alpha_check=coroot(id,j) in
  let beta=delta(E)*alpha in
  prints("sign_2i12 alpha,beta=", alpha, ", ", beta)
; let k=root_index(id,beta) in
  let beta_check=coroot(id,k) in
  let (p,q)=(parameter(E),parameter(F)) in
  assert(valid(E),"E is not valid")
; assert(valid(F),"F is not valid")
; assert(ext_type(j,E)="2i12" and ext_type(j,F)="2r21","Wrong types")
; assert(q=Cayley_set(j,Cayley_set(k,p)[0])[0] or
         q=Cayley_set(j,Cayley_set(k,p)[0])[1]
        ,"q is not a 2i12 Cayley transform of p")
; let l_test_1=in_lattice((1+^theta(E)),l(F)-l(E)) in
  let l_test_2=in_lattice((1+^theta(E)),l(F)-l(E)+alpha_check) in
  let lambda_test_1=in_lattice((1+^omega(F)),lambda_rho(F)-lambda_rho(E)) in
  let lambda_test_2 =
    in_lattice((1+^omega(F)),alpha+lambda_rho(F)-lambda_rho(E)) in
  let kappa= if (l_test_2 and lambda_test_2) then -1 else 1 fi in
  {solve for sigma}
  let sigma = solve((1+^omega(F)),alpha-beta) in
  assert(>#sigma,"can't solve for sigma sign_2i12")
; let tau=tau(E) in
  let tau_alpha_beta=tau*(alpha_check+beta_check) in
  let tau_0=
    ratvec_as_vec(tau+tau*beta_check*sigma[0]-tau_alpha_beta/2*alpha) in
  let s = solve((1+^theta(E)),alpha_check-beta_check) in
  assert(>#s,"can't solve for s in epsilon_t")
; let t=t(F) in
  let t_alpha_beta=t*(alpha+beta) in
  let t_0=vec:ratvec_as_vec(t+t*beta*s[0]-t_alpha_beta/2*alpha_check) in
  let E_new=
    if l_test_1
    then (ic(E),delta(E),gamma(E),lambda_rho(E),theta(E),g(E),l(F),omega(E)
         ,tau_0,t_0)
    elif l_test_2
    then (ic(E),delta(E),gamma(E),lambda_rho(E),theta(E),g(E),l(F)+alpha_check
         ,omega(E),tau_0,vec:t_0-s[0])
    else error("l_test_1 and l_test_2 both false")
    fi
  then F_new=
    if lambda_test_1
    then (ic(F),delta(F),gamma(F),lambda_rho(E),theta(F),g(F),l(F),omega(F)
         ,tau_0,t_0)
    elif lambda_test_2
    then (ic(F),delta(F),gamma(F),lambda_rho(E)+alpha,theta(F),g(F),l(F)
         ,omega(F),vec:tau_0-sigma[0],t_0)
    else prints(E, x(E), y_gen(E), F, x(F), y_gen(F))
    ; error("lambda_test_1 and lambda_test_2 both false") fi
  in
  assert(valid(E_new),"E_new is not valid")
; assert(valid(F_new),"F_new is not valid")
; let sign_E=sign(E,E_new) in
  let sign_F=sign(F,F_new) in
  let sign=sign_E*sign_F*kappa in
  prints("sign_E=", sign_E, ", sign_F=", sign_F, " kappa=", kappa
        , " sign=", sign)
; sign
end

{ sign_2r21(j,E,F) is defined to be sign_2i12(j,F,E) }
set sign_2r21(int j, ExtParam E, ExtParam F) =int:
  sign_2i12(j,F,E)

{ see "More on the 2i12, 2Ci and 1i cases" Section 2 }
set sign_2Ci (int j,ExtParam E) = int:
  let id=integrality_datum(E)
  then alpha=root(id,j), alpha_check=coroot(id,j)
  then beta=E.delta*alpha then beta_check=coroot(id,beta)
  then exponent = rat_as_int( { exponent of i should be even, convert for -1 }
    ((alpha_check+beta_check)*E.tau) * ((E.g-E.l)*alpha-1) /2 )
  in (-1)^exponent

set sign_2Cr (int j,ExtParam E) = int:
  let id=integrality_datum(E)
  then alpha=root(id,j), alpha_check=coroot(id,j)
  then beta=E.delta*alpha then beta_check=coroot(id,beta)
  then exponent = rat_as_int( { exponent of i should be even, convert for -1 }
    (alpha_check*(E.gamma-E.lambda_rho)-1) * (E.t*(alpha+beta)) /2 )
  in (-1)^exponent

set signs_1i1(int j, ExtParam E, ExtParam E1, ExtParam F) =
  (int,int):
begin
  assert(ext_type(j,E)="1i1","Wrong type in signs_1i1")
; let alpha=root(E.ic,j), alpha_check=coroot(E.ic,j), F=ext_Cayley(j,E)[0]
  then sigma = solve((1+^omega(F)),alpha)  in
  assert(>#sigma,"can't solve for sigma in signs_1i1")
; let new_tau_E = vec: E.tau-(alpha_check*E.tau)*sigma[0]
  , l_E_alpha = E.l*alpha
  then new_l_E=
    if is_even(l_E_alpha)
    then E.l-rat_as_int(l_E_alpha/2)*alpha_check
    else E.l-rat_as_int((l_E_alpha-1)/2)*alpha_check
    fi
  then new_E =
    (E.ic,E.delta,E.gamma,E.lambda_rho,E.theta
    ,E.g,new_l_E,E.omega,new_tau_E,E.t)
  then new_F = ext_Cayley(j,new_E), sign_E_new_E=sign(E,new_E)
  in prints("sign_E_new_E:", sign_E_new_E)
{ ; display(new_E) }
; display(E)
; let sign_cross = sign_E_new_E*sign(ext_cross(j,new_E),E1)
  ,  sign_Cayley = sign_E_new_E*sign(ext_Cayley(j,new_E)[0],F)
  in (sign_cross,sign_Cayley)
end

{ not needed?
  set signs_1r1f(int j, ExtParam E, ExtParam F) = int:
    signs_1i1(j,F,E)
}
