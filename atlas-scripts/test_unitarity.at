{this file is old and due to be modified, November 2016}

<groups.at
<hermitian.at
<unitary.at
<lietypes.at
<representations.at
<reorient.at

{ test list [(Param p,bool answer)],
  test p for unitarity and compare result with answer
  prints:
    parameter,
    computed unitarity,
    claimed unitarity,
    number of reducibility points,
    number of deformations
}

set new_test=true

set test([(Param,bool)] parameters)= bool:
  let rf = let (p,)=parameters[0] in real_form(p)
  , rv=true
  then ()=prints("Testing ", #parameters, " parameters for ",rf)
  in
if new_test
then
  for (p,answer)@i in parameters do
    prints("Case ", i, " is ", p, ", should "
          , if answer then "be" else "not be" fi, " unitary.")
  ;(let (c_form,count)=
      let on_p=orientation_nr(p), P = null_module(rf)
      , KL_sum = KL_sum_at_s(p)
      in
        for ev@q in KL_sum
        do let fd=full_deform(q) in
          prints("Deformed ", q,": "
                ,#(reducibility_points(q))," points, ",#fd, " terms.")
        ; P+:= ev*orientation_nr_term(on_p,q)*fd
	od
      ; (P,#KL_sum)
    then form=convert_cform_hermitian(c_form)
    then unitary=is_unitary(form)
    in
      if unitary !=answer then rv:=false fi
    ; prints("Found ", answer, ", statistics "
            , #(reducibility_points(p)),", ",count)
   )
  od
; prints("Result: ",if rv then "Passed" else "Failed" fi); rv
else
  for (p,answer)@i in parameters do
{    let (c_form,list)=c_form_irreducible_long(p)}
    let (formula,terms,c_form)=c_form_irreducible_long(p)
    then form=convert_cform_hermitian(c_form)
    then unitary=is_unitary(form)
    in
    if unitary !=answer then rv:=false fi
  ; prints(i, ", ",p, ", ", unitary, ", ", answer,
           ", ", #(reducibility_points(p)),", ", #formula)
  od
; prints("Result: ",if rv then "Passed" else "Failed" fi); rv
fi

set test([Param] parameters)= bool:test(for p in parameters do (p,true) od)

set test_one(Param param,bool unitary)=test([(param,unitary)])
set test_one_unitary(Param param)=test([(param,true)])

{ prepare parameters, all are supposed to be unitary }
{set all_unitary([Param] parameters)= [(Param,bool)]:
  for p in parameters do (p,true) od
}

{ prepare parameters from |nu| values only }
{set spherical_mixed(RealForm G,[(ratvec,bool)] nu_pairs)=  [(Param,bool)]:
  for (nu,ans) in nu_pairs do (spherical_principal_series(G,nu),ans) od
}

{ G should be absolutely simple, SL(n,R), Sp(2n,R), S(n,n) or SO(n+1,n)
  or simple complex, see spherical_unipotent_representations in representations.at}
set test_spherical_unipotent(RealForm G)=void:
for p in spherical_unipotent_representations(G) do  prints(new_line,p);print_is_unitary(p) od


{ a series of tests if increasing length }
{ very fast tests }
set test1()=test(spherical_unipotent_representations(Sp(4,R)))
set test2()=test(spherical_unipotent_representations(split_form(G2)))
set test3()=test(spherical_unipotent_representations(Sp(6,R)))
set test4()=
  let G2=quasisplit_form(inner_class(adjoint("G2"),"e"))
  then p=trivial(G2) then (B,t)=block(p)
  in test (for p@i in B do (p,i<5 or i=t) od)

{ slightly longer, up to a few minutes }
set test5()= test(spherical_unipotent_representations (SO(5,4)))
set test6()=
  let p=trivial(Sp(4,R)) then (B,t)=block(p) in
  test(for p@i in B do (p,i<7 or i=t) od)

{ first 49 of 59 spherical unitary parameters for F4 }
set test7()= bool:
  test(for i:49 do minimal_spherical_principal_series(split_form(F4),F4_spherical_unitary[i]) od)

{ first 100 of spherical unitary for E7
  requires more memory}
set test8()= bool:
  test(for i:100 do minimal_spherical_principal_series(split_form(E7),E7_spherical_unitary[i]) od)

{ trivial of F4 takes up to two hours }
set test9()=bool:
  prints("Testing trivial of F4"); is_unitary(trivial(split_form(F4)))
