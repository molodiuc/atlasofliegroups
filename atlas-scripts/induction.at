{! Parabolic induction from real and $\theta$-stable parabolics; cuspidal and
$\theta$-stable data of a parameter.

If L is a $\theta$-stable Levi subgroup of G, then KGB for L embeds into KGB for G.

For parabolic induction, a parameter p_L for the Levi L is assigned a parameter
p_G for G:

p_L=(x_L,lambda,nu) -> p_G=(embed_KGB(x_L,G),lambda + appropriate rho-shift,nu).

For real parabolic induction, the rho-shift is:
$\rho_r(G)-\rho_r(L)+(1-\theta)(\rho_S(G)-\rho_S(L))$. (Here $\rho_S$ is a certain
half sum of complex roots.)

For $\theta$-stable induction, the rho-shift is:
$\rho_i(G)-\rho_i(L)+\rho_{complex}(G)-\rho_{complex}(L)
   =\rho(G)-\rho_r(G)-\rho(L)+\rho_r(L)$.
  Since $\mathfrak q$ is $\theta$ -stable, $\rho_r(G)-\rho_r(L)=0$, so the
  shift is $\rho(G)-\rho(L)=\rho(\mathfrak u)$.

Then $\operatorname{Ind}_P^G I(p_L)=I(p_G)$.

In the $\theta$-stable case, the shifted parameter p_G may be non-standard
and needs to be standardized:

If p=(x,lambda,nu), and $\langle \text{lambda},\alpha^{\vee}\rangle <0$ for
some imaginary root $\alpha$ (i.e. non-standard), let
i_root_system=imaginary roots for x(p). Find $w$ so
that $w^{-1}\cdot$lambda is dominant for imaginary roots, set
p_dom=parameter(x,$w^{-1}\cdot$lambda,nu) and return coherent continuation action
(wrt imaginary roots) of $w$ on p_dom. !}

<basic.at
<misc.at { for |simple_imaginary_subsystem| }
<parabolics.at
<kl.at { for character_formula }
<coherent.at
<synthetic.at {for unnormalized_torus_factor}
<K.at

set verbose=false

{. If L is a theta-stable Levi factor in G,  KGB for L embeds in KGB for G. .}
set embed_KGB (KGBElt x_L,RealForm G) = KGBElt:
  KGB_elt(G,involution(x_L), torus_factor(x_L))

{. Given a KGB element of G, find one for the theta-stable Levi L which maps to it. .}
set inverse_embed_KGB (KGBElt x_G,RealForm L) = KGBElt:
  KGB_elt(L,involution(x_G), torus_factor(x_G))


{--------------------- real parabolic induction -------------------}

{. Given an involution theta and a root datum, return the set S of complex roots
   containing the first positive representative of each quadruple
   ($\pm$ alpha,$\pm$ theta(alpha)). .}
set makeS (mat theta,RootDatum rd) = mat:
  columns_with((int j,vec alpha):posroot_index(rd,theta*alpha)>j,posroots(rd))

{. As the previous function, with argument a KGB element x determining the involution
   and root datum .}
set makeS (KGBElt x) = mat: makeS(involution(x),root_datum(x))

{. Half sum of roots in chosen set S of complex roots, described above. .}
set rho_S ((mat,RootDatum)pair) = ratvec: sum(makeS(pair))/2

{. As previous function, with argument KGB element x. .}
set rho_S (KGBElt x)            = ratvec: sum(makeS(x))/2


{. Real parabolic induction of a standard module of real Levi L to G .}
   set real_induce_standard (Param p_L,RealForm G) = Param:
  let x_L=x(p_L)
  then  L=real_form(x_L), x_G=embed_KGB(x_L,G)
  then theta=involution(x_G)
  then shift=rho_r(x_G)-rho_r(x_L)+(1-theta)*(rho_S(x_G)-rho_S(x_L))
  in parameter(x_G,lambda(p_L)+shift,  nu(p_L))

{. Real parabolic induction of standards, applied to a formal sum of
   parameters (ParamPol). .}
set real_induce_standard (ParamPol P,RealForm G) = ParamPol:
  let result=null_module(G) in
  for c@p in P do result+:=c*real_induce_standard(p,G) od;
  result

{. Write the (real) induced of an irreducible J(p_L) of L as a formal sum of
   standards for G; uses the character formula to write J(p_L)
   as a formal sum of standards for L first. (Auxiliary function) .}
set real_induce_irreducible_as_sum_of_standards (Param p_L, RealForm G) =
    ParamPol:
  let cf=character_formula(p_L), result=null_module(G) in
  for coeff@p in cf do result+:=coeff*real_induce_standard(p,G) od;
  result

{. Write the (real) induced Ind(J(p_L)) of an irreducible of L as a sum of
   irreducibles for G; uses composition series to convert
   output of the previous function into sum of irreducibles. .}
set real_induce_irreducible(Param p_L, RealForm G)= ParamPol:
  let cf=real_induce_irreducible_as_sum_of_standards(p_L,G)
  , result=null_module(G)
  in for coeff@p in cf do result+:=coeff*composition_series(p) od;
  result


{  ----------------------   cuspidal data   ----------------------------- }
{. Cuspidal data associated to a parameter p: a cuspidal parabolic subgroup P=MN
   and parameter p_M for a relative limit of discrete series so that
   Ind(I(p_M))=I(p); uses real_parabolic(x) of parabolics.at .}
set cuspidal_data (Param p) = (Parabolic,Param):
  let p=make_no_Cplus(p)
  then x_G=x(p)
  then P=real_parabolic(x_G)
  then M=Levi(P), theta=involution(x_G)
  then x_M=inverse_embed_KGB(x_G,M)
  in
  (P
  ,parameter
   (x_M
  ,lambda(p)-rho_r(x_G)+rho_r(x_M)-(1-theta)*(rho_S(x_G)-rho_S(x_M))
   ,nu(p)
   )
  )

{  ----------------------   theta-stable data   -----------------------------}

{. Theta-stable data associated to a parameter p: a theta-stable parabolic P=LN
   with L relatively split, and parameter p_L for a principal series representation
   so that p is obtained by cohomological parabolic induction
   from p_L; uses theta_stable_parabolic(x) of parabolics.at. .}
set theta_stable_data (Param p) = (Parabolic,Param):
  let p=make_no_Cminus(p) then x_G=x(p) then P=theta_stable_parabolic(x_G)
  then L=Levi(P), theta=involution(x_G)
  then x_L=inverse_embed_KGB(x_G,L)
  in
  (P
  ,parameter
   (x_L
   ,lambda(p)-rho(real_form(p))+rho_r(x(p))+rho(L)-rho_r(x_L)
   ,nu(p)
   )
  )

{---------------------standardize-----------------------------------------}
{need real parabolic induction to define standardize (uses cuspidal_data)}

{. Auxiliary function .}
set coherent_std_imaginary (W_word w,Param p) = ParamPol:
  let (,p_M)=cuspidal_data(p) in
  real_induce_standard(coherent_std(w,p_M),real_form(p))

{
set coherent_std_imaginary (ratvec lam, Param p) =  ParamPol:
  let (P,p_M)=cuspidal_data(p) in
  let M=Levi(P) in let rd_M=root_datum(M) in
  let (lam_new,w)=make_dominant(rd_M,lam) in
  if lam_new!=lambda(p) then prints("HERE IS A PROBLEM!!!!!!!") fi;
  real_induce_standard(coherent_std(w,p_M),real_form(p))
}


{. convert a possibly non-standard parameter into a linear combination of
  standard ones .}
set standardize (Param p) = ParamPol:
  if is_standard(p) then ParamPol:p
  else let p=make_no_Cplus(p)
    then i_root_system=root_datum(simple_imaginary_subsystem(x(p)))
    , lambda=lambda(p)
    then (lambda_dom,w)=make_dominant(i_root_system,lambda)
    then p_dom=parameter(x(p), act(inverse(w),lambda), nu(p))
    in coherent_std_imaginary(w,p_dom)
  fi

{. standardize a formal linear combination of possibly non-standard parameters .}
set standardize (ParamPol P) = ParamPol:
  let result=null_module(P) in
  for c@p in P do result+:=c*standardize(p) od;result

{--------------------- theta-stable parabolic induction -------------------}

{. Theta-stable (cohomological) parabolic induction of a standard module for
   the Levi L of a theta-stable parabolic; if outside of weakly good range,
   must apply standardize. .}
set theta_induce_standard (Param p_L,RealForm G) = ParamPol:
  let L=real_form(x(p_L)), x_G=embed_KGB(x(p_L),G)
  then shift=rho(G)-rho(L)
  in
    if verbose
    then prints("theta_induce_standard of parameter on L: ",p_L)
    ; prints("shift (rho_G-rho_L): ", shift)
    fi;
  let { p_G=parameter(x_G,lambda(p_L)+rho(G)-rho_r(x_G)-rho(L)+rho_r(x(p_L))
                     , nu(p_L)) then }
    p_G=parameter(x_G,lambda(p_L)+shift,nu(p_L))
  in if verbose then prints("p_G before standardization:", p_G) fi;
  { if verbose
    then prints("K_norm(p_G) before standardization:", K_norm(p_G*0)) fi; }
  let p_G_standardized=null_module(G) in
  if is_standard(p_G)
  then p_G_standardized:=(ParamPol:p_G)
  ; if verbose then prints("p_G is standard: ", p_G, standardize(p_G)) fi
  else if verbose then prints("Need to standardize:", p_G) fi
  ; p_G_standardized:=standardize(p_G)
  ; if verbose then prints("p_G standardized:", p_G_standardized) fi
{ prints("K_norm(p_G standardized):", K_norm(p_G)}
  fi;
{ prints("K_norms of terms of p_G: "
        , for q in monomials(p_G) do K_norm(q) od ); }
  p_G_standardized

{. Write the (theta-stable) induced of an irreducible J(p_L) of L as a formal
   sum of standards for G; uses the character formula to write J(p_L)
   as a formal sum of standards for L first. (Auxiliary function) .}
set theta_induce_irreducible_as_sum_of_standards (Param p_L, RealForm G) =
    ParamPol:
  let cf=character_formula(p_L) in
  if verbose
  then prints("p_L:",p_L); prints("Character formula for p_L:"); prints(cf)
  fi;
  let result=null_module(G) in
  for coeff@p in cf
  do let new=theta_induce_standard(p,G) in result+:=coeff*new od;
  if verbose then prints("induced as sum of standards:", result) fi;
  result

{. Write the (theta-stable) induced Ind(J(p_L)) of an irreducible of L
   as a sum of irreducibles for G; uses composition series to convert
   output of the previous function into sum of irreducibles. .}
set theta_induce_irreducible(Param p_L, RealForm G) = ParamPol:
  let cf=theta_induce_irreducible_as_sum_of_standards(p_L,G)
  , result=null_module(G)
  in
  for coeff@p in cf do result+:=coeff*composition_series(p) od;
  if verbose then prints("induced as sum of irreducibles: ", result) fi;
  result


{ ------------------- combined real and theta-stable induction ------------- }
{ induce_standard(p_L,P,G)=induce_standard( (x_L,lambda_L,nu_L), (S,x), G)
  in the theta-stable case may need to use action of Weyl group
  ** (S,x) is the standard parabolic only if x=x_min(P) (up to W_L)
  otherwise, need to apply coherent continuation (or something...)
  in application to highest_weight_to_K_type (in LKT_aux.at) it appears
  we can arrange before calling induce_standard that this holds
  for now throw an error if this fails
}

{. Real or theta-stable parabolic induction of a standard module,
   depending on whether P=LN a real or theta-stable parabolic
   (returns error message if neither). .}
set induce_standard (Param p_L,Parabolic P,RealForm G) = ParamPol:
  assert(is_parabolic_real(P) or is_parabolic_theta_stable(P)
        ,"Induction only defined for real or theta-stable parabolics");
  if is_parabolic_real(P) then ParamPol:real_induce_standard(p_L,G)
  else let L=Levi(P), (S,)=P, x_P=x_min(P), x_G=embed_KGB(x(p_L),G) in
    assert((S,x_G)=(S,x_P),"x(p_L) and x(P) don't agree up to W_L")
  ; theta_induce_standard( p_L,G)
  fi

{. Write the (real or theta-stable) induced Ind(J(p_L)) of an irreducible
   of L as a sum of irreducibles for G; error message if P=LN is not a real
   or theta-stable parabolic. .}
set induce_irreducible (Param p_L,Parabolic P,RealForm G) = ParamPol:
  assert(is_parabolic_real(P) or is_parabolic_theta_stable(P)
        ,"Induction only defined for real or theta-stable parabolics");
  if is_parabolic_real(P) then ParamPol:real_induce_irreducible(p_L,G)
  else let L=Levi(P), (S,)=P, x_P=x_min(P), x_G=embed_KGB(x(p_L),G) in
    assert((S,x_G)=(S,x_P),"x(p_L) and x(P) don't agree up to W_L")
  ; theta_induce_irreducible( p_L,G)
  fi

{. Real or theta-stable parabolic induction applied to a linear combination
   of standard modules (error message if P is not real or theta-stable). .}
set induce_standard (ParamPol pol,Parabolic P,RealForm G) = ParamPol:
  let result=null_module(G) in
  for c@p in pol do result+:=c*induce_standard(p,P,G) od;
  result
